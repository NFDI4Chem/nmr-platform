
# This worklflow will perform following actions when the code is pushed to main branch:
# - Build the latest docker image in main.
# - Push the latest docker image to Docker Hub
# 
# Maintainers:
#   - name: Nisha Sharma
#   - email: nisha.sharma@uni-jena.de

name : Build NMR-Platform image

on:
  push:
    branches: [zero-downtime-deployment]

env:
  REPOSITORY_NAME: nmr-platform
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  REPOSITORY_NAMESPACE: nfdi4chem

jobs:
  setup-build-publish-deploy-dev:
    name: Build & Push Image to Docker Hub
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
    # Checkout code
    - name: Checkout
      uses: actions/checkout@v4

    # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Login to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME  }}
        password: ${{ env.DOCKER_HUB_PASSWORD  }}

    # Extract metadata for better tagging
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REPOSITORY_NAMESPACE }}/${{ env.REPOSITORY_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable=true

    # Add HTTP basic auth credentials
    - name: Add HTTP basic auth credentials
      run: echo '${{ secrets.COMPOSER_AUTH_JSON }}' > auth.json

    # Build and push the app Docker image
    - name: Build and push App Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        secrets: |
          composer_auth=./auth.json
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Clean up auth.json (security best practice)
    - name: Clean up auth.json
      if: always()
      run: rm -f auth.json