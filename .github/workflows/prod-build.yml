
# This worklflow will perform following actions when the code is pushed to main branch:
# - Build the latest docker image in main.
# - Push the latest docker image to Docker Hub
# 
# Maintainers:
#   - name: Nisha Sharma
#   - email: nisha.sharma@uni-jena.de

name : Build NMR-Platform image

on:
  push:
    branches: [zero-downtime-deployment]

env:
  REPOSITORY_NAME: nmr-platform
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  REPOSITORY_NAMESPACE: nfdi4chem

jobs:
  setup-build-publish-deploy-dev:
    name: Build & Push Image to Docker Hub
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
    # Checkout code
    - name: Checkout
      uses: actions/checkout@v4

    # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Login to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_HUB_USERNAME  }}
        password: ${{ env.DOCKER_HUB_PASSWORD  }}

    # Extract metadata for better tagging
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REPOSITORY_NAMESPACE }}/${{ env.REPOSITORY_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable=true

    # Debug: Check if COMPOSER_AUTH_JSON secret exists and is valid
    - name: Debug Composer Auth Secret
      run: |
        echo "Checking COMPOSER_AUTH_JSON secret..."
        if [ -z "${{ secrets.COMPOSER_AUTH_JSON }}" ]; then
          echo "❌ COMPOSER_AUTH_JSON secret is empty or not set!"
          echo "Creating empty auth.json as fallback"
          echo '{}' > auth.json
        else
          echo "✅ COMPOSER_AUTH_JSON secret exists"
          echo "Secret length: $(echo '${{ secrets.COMPOSER_AUTH_JSON }}' | wc -c) characters"
          # Validate JSON without exposing content
          if echo '${{ secrets.COMPOSER_AUTH_JSON }}' | jq empty 2>/dev/null; then
            echo "✅ Secret contains valid JSON"
            echo '${{ secrets.COMPOSER_AUTH_JSON }}' > auth.json
          else
            echo "❌ Secret contains invalid JSON!"
            echo "First 50 characters (safe): $(echo '${{ secrets.COMPOSER_AUTH_JSON }}' | head -c 50)..."
            echo "Creating empty auth.json as fallback"
            echo '{}' > auth.json
          fi
        fi
        
    # Verify auth.json was created correctly
    - name: Verify auth.json
      run: |
        echo "auth.json contents (structure only):"
        if [ -f auth.json ]; then
          jq 'keys' auth.json 2>/dev/null || echo "❌ auth.json contains invalid JSON"
        else
          echo "❌ auth.json file not found!"
        fi

    # Build and push the app Docker image
    - name: Build and push App Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        secrets: |
          composer_auth=./auth.json
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Clean up auth.json (security best practice)
    - name: Clean up auth.json
      if: always()
      run: rm -f auth.json