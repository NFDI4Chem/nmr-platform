services:
  # Traefik Load Balancer
  traefik:
    container_name: traefik
    image: traefik:v3.0
    command:
    - --api.dashboard=true
    - --api.insecure=false
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443
    - --providers.docker=true
    - --providers.docker.exposedbydefault=false
    - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
    - --certificatesresolvers.letsencrypt.acme.email=admin@nmrxiv.org
    - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
    - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
    networks:
    - app_network
    ports:
    - 80:80
    - 443:443
    restart: unless-stopped
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - ./acme.json:/acme.json
  # Laravel Application with FrankenPHP
  app:
    image: nfdi4chem/nmr-platform:latest
    restart: unless-stopped
    # For production, use built image - only mount storage and env
    volumes:
      - app_storage:/var/www/html/storage
      - ../.env:/var/www/html/.env
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
    - traefik.enable=true
    # HTTP to HTTPS redirect
    - traefik.http.routers.app-http.rule=Host(`platform.fsu.nmrxiv.org`)
    - traefik.http.routers.app-http.entrypoints=web
    - traefik.http.routers.app-http.middlewares=https-redirect
    - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
    - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
    # HTTPS router
    - traefik.http.routers.app-https.rule=Host(`platform.fsu.nmrxiv.org`)
    - traefik.http.routers.app-https.entrypoints=websecure
    - traefik.http.routers.app-https.tls=true
    - traefik.http.routers.app-https.tls.certresolver=letsencrypt
    - traefik.http.services.app.loadbalancer.server.port=8000

  # Queue Worker
  queue:
    image: nfdi4chem/nmr-platform:latest
    restart: unless-stopped
    volumes:
      - app_storage:/var/www/html/storage
      - ../:/var/www/html:cached  
      - ../.env:/var/www/html/.env
    env_file:
    - ../.env
    command: ["php", "artisan", "queue:work", "--sleep=3", "--tries=3", "--max-time=3600"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "queue:work"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Scheduler
  scheduler:
    image: nfdi4chem/nmr-platform:latest
    restart: unless-stopped
    volumes:
      - app_storage:/var/www/html/storage
      - ../:/var/www/html:cached
      - ../.env:/var/www/html/.env
    env_file:
    - ../.env
    command: ["sh", "-c", "while true; do php artisan schedule:run --verbose --no-interaction && sleep 60; done"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-nmr_platform_prod}
      POSTGRES_USER: ${DB_USERNAME:-nmr_platform_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-nmr_platform_user} -d ${DB_DATABASE:-nmr_platform_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Meilisearch
  meilisearch:
    image: getmeili/meilisearch:v1.6
    restart: unless-stopped
    environment:
      MEILI_MASTER_KEY: ${MEILISEARCH_KEY}
      MEILI_NO_ANALYTICS: true
      MEILI_ENV: production
      MEILI_DB_PATH: /meili_data
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 5s
      retries: 3



volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  meilisearch_data:
    driver: local
  app_storage:
    driver: local
  app_bootstrap_cache:
    driver: local


networks:
  app_network:
    driver: bridge